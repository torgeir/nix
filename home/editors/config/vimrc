" these bindings are the same across vim, nvim, and intellij
map <space> <leader>
let g:mapleader = "\<space>"
let g:maplocalleader = ','

" move like in the terminal
nnoremap <M-f> w
nnoremap <M-b> b
inoremap <M-f> <C-o>w
inoremap <M-b> <C-o>b

" window
nnoremap <leader>wh <C-w>h
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k
nnoremap <leader>wl <C-w>l

" close
nmap <leader>wd :q<cr>

" recenter
noremap <C-l> zz

" dired
noremap <C-x><C-j> :Explore<cr>

" escape out of normal mode
inoremap jk <esc>l

" goto whats under cursor
nnoremap <leader>hN #
nnoremap <leader>hn *

" before plugins
filetype off

" after plugins
filetype indent plugin on

""""""""""""""""""""""""""""""""""""""""
" settings
""""""""""""""""""""""""""""""""""""""""
set background=dark
syntax on                         " highlight
set backspace=indent,eol,start    " intuitive backspacing in insert mode
set encoding=utf-8                " encoding
set hidden                        " allow unsaved buffer switches
set history=1000                  " keep longer history
set relativenumber                " line numbers relative to cursor
set autoread                      " automatically re-read file on outside change
set nocompatible                  " dont bother being compatible with vi
set lazyredraw                    " dont redraw until macro is complete
set mouse=a                       " enable mouse in all modes

set autoindent                    " keep indent on newline
set smartindent                   " auto-indent (block/language)
set shiftround                    " round to whole indents
set shiftwidth=2                  " indent = 2 chars
set softtabstop=2                 " 2 tab = 2 spaces
set expandtab                     " tabs are spaces
set wrap linebreak nolist         " soft wrap lines
set breakat=" "                   " where to insert line breaks
let &showbreak="↪ "               " character to visualize breaks

set iskeyword+=-                  " quotes are also keywords, so e.g. vi' works

" set columns=84                   " 84 - 4 = 80 char width
set numberwidth=6                 " linenumber width
set showcmd                       " show partial commands
set noshowmode                    " no --insert--
set ruler                         " show ruler
set scrolloff=8                   " more context around the cursor as it scrolls

set showmatch                     " show matching chars (,{,..
set matchtime=3                   " blink matching chars for .x seconds
set matchpairs+=<:>               " add < > to matched pairs
runtime macros/matchit.vim        " make % match if/else/..
" runtime ftplugin/man.vim          " enable viewing manpages with :Man <smtn>

set ignorecase                    " use smart case searching, only search for \
set smartcase                     " case sensitive words if search has capital
set incsearch                     " ...dynamically as they are typed.
set wrapscan                      " make search wrap
set hlsearch                      " highlight search-terms
set hlsearch!

set formatoptions-=t              " don't hard wrap

" disable all bells
set noerrorbells
set visualbell
set t_vb=

" custom invisibles
set listchars=tab:▸\ ,eol:¬

" turn backup off (.swp)
set nobackup
set nowb
set noswapfile

" improve menu on :e <tab>
set wildmenu
set wildmode=list:longest,full
set wildignore+=.git,.svn
set wildignore+=node_modules
set wildignore+=target,classes
set wildignore+=dist
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.DS_Store
set wildignore+=*.orig

" dictionary
set dictionary+=/usr/share/dict/words

" statusline
set laststatus=2

" splitting
set splitright splitbelow

" tab labels
"set guitablabel=%{GuiTabLabel()}

" wrap lines in diff
autocmd FilterWritePre * if &diff | setlocal wrap< | endif

" restore cursor position
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal g`\"" |
\ endif

" tweak colors
hi Comment cterm=bold ctermfg=0 ctermbg=NONE guifg=0 guibg=NONE
hi LineNr ctermfg=0 ctermbg=NONE guifg=0 guibg=NONE
hi StatusLine cterm=bold ctermfg=2 ctermbg=0
hi StatusLineNC cterm=NONE ctermfg=7 ctermbg=0
set cursorline
hi clear CursorLine
hi clear CursorLineNR
hi CursorLineNR cterm=bold ctermfg=1 ctermbg=NONE guifg=1 guibg=NONE

set fillchars=fold:\ ,vert:\│,msgsep:‾
hi NonText ctermfg=0
hi VertSplit ctermfg=0 ctermbg=NONE guifg=0 guibg=NONE

hi ErrorMsg ctermbg=NONE ctermfg=1 guibg=NONE guifg=1
